plugins {
	id 'java'
	id 'application'
}

mainClassName = 'main.WordBookMaker'
version = '1.1.0'
buildDir = './build'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    processName = 'WordBookMaker'
    outputDir = System.getProperty("user.home") + "/Desktop/${processName}"
    xmlConfig = 'WordBookMaker_Config.xml'
}

jar {
    manifest {
        attributes  'Title': "${processName}", 'Version': version, 'Main-Class': mainClassName, 'Class-Path' : '.'
    }
    archiveName "${processName}_" + version + '.jar'
    dependsOn configurations.runtime
    from {
        configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
    }

    // exclude 'start.bat'
    exclude "${xmlConfig}"
}

task copyTask {
	doFirst{
		// 폴더 생성
		File inputFile = new File("${outputDir}/input")
		inputFile.mkdirs()
		new File("${outputDir}/output").mkdirs()
		println("mkdirs : input, output")
		
		// jre 복사
		File jre = new File("${outputDir}/jre")
		if (!jre.exists()){
			copy {
				from System.getProperty('java.home')
				into jre
				println("Copy JRE")
			}
		} else {
			println("Skip Copy JRE")
		}

		// jar 파일 및 config 파일 복사
		copy {
		    from jar, "${buildDir}/resources/main/${xmlConfig}" 
		    into "${outputDir}"
		    println("Copy jar")
		}
		
		// resource input 파일 복사
		copy {
			from "${buildDir}/resources/main/input"
			into inputFile
			println("Copy input resource files")
		}
	}
}

task makeBatch {
	dependsOn 'copyTask'
	doLast{
		// batch 파일 작성
	    new File("${outputDir}", "start.bat").text =
		"echo off"+ "\n" +
		"chcp 65001"+ "\n" +
		".\\jre\\bin\\java -jar -Dfile.encoding=UTF-8 .\\${processName}_" + version + ".jar .\\${xmlConfig}"+ "\n" +
		"pause"+ "\n"
		println("Make Batch File")
	}
}

task compressZip(type: Zip) {
	dependsOn 'makeBatch'
    archiveName = "${processName}_" + version + ".zip"
    exclude "${archiveName}"
    include '**'
    destinationDir = file("${outputDir}")
    
	from "${outputDir}"

    println("Compress ${processName} Zip")
}

clean {
	delete "${outputDir}"
	println("Delete ${outputDir}")
}

build {
	dependsOn compressZip
}

repositories {
    mavenCentral()
    jcenter()
}


dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.20'
 
    // https://mvnrepository.com/artifact/org.apache.pdfbox/fontbox
    compile group: 'org.apache.pdfbox', name: 'fontbox', version: '2.0.20'


    compile group: 'ch.qos.logback', name: 'logback-classic', version: "1.2.3"
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    compile group: 'ch.qos.logback', name: 'logback-core', version: "1.2.3"
    
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    compile group: 'org.apache.poi', name: 'poi', version: '4.1.2'
    
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
}
